{"version":3,"sources":["components/Main/styles.module.css","components/Todos/style.module.css","components/Todos/index.jsx","components/Main/index.js","store/actions/todoActions.js","store/actions/types.js","App.js","store/reducers/todoReducer.js","index.js"],"names":["module","exports","Todo","todo","rmTodo","toggleCheckbox","updateTodowithId","title","id","isCompleted","useState","editing","setEditing","editChange","setEditChange","className","classes","todoContainer","todotextContainer","radioCustom","type","checked","onChange","value","editingText","e","target","onKeyUp","includes","key","completed","todoText","join","onDoubleClick","crossMark","onClick","connect","state","todos","dispatch","updateTodo","todoDesc","initState","removeTodo","tglCompleted","toggleallCompleteTodos","allComplete","toggle","deleteAllComp","updateTodoWithID","setTodoDesc","showState","setShowState","setAllComplete","useEffect","getActiveTodoLength","filter","t","length","headingTodo","outerContainer","actionsContainer","actionsBtnContainer","activeBtn","inputBaseContainer","markAllComp","darkText","toggleAllCompleted","inputBase","placeholder","event","preventDefault","map","Todos","App","updateLocalStorage","newState","localStorage","setItem","JSON","stringify","initialState","reducer","action","todoAry","uuid","v4","getItem","parse","upDatedState","allCompleted","allActive","updatedWithId","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d500c04b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"headingTodo\":\"styles_headingTodo__1SreB\",\"outerContainer\":\"styles_outerContainer__2A57p\",\"actionsContainer\":\"styles_actionsContainer__2Rlef\",\"actionsBtnContainer\":\"styles_actionsBtnContainer__3kEgD\",\"activeBtn\":\"styles_activeBtn__OWnDy\",\"inputBaseContainer\":\"styles_inputBaseContainer__3bLCl\",\"markAllComp\":\"styles_markAllComp__3zcJa\",\"inputBase\":\"styles_inputBase__20gan\",\"darkText\":\"styles_darkText__2XqNt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoContainer\":\"style_todoContainer__2NOwx\",\"slide-right\":\"style_slide-right__Alepz\",\"todoText\":\"style_todoText__XroWf\",\"todotextContainer\":\"style_todotextContainer__1gSs-\",\"editingText\":\"style_editingText__1irTJ\",\"crossMark\":\"style_crossMark__KifYi\",\"completed\":\"style_completed__35sSQ\",\"radioCustom\":\"style_radioCustom__2Vqnu\"};","// Imports - libs\r\nimport React, { useState } from \"react\";\r\n\r\n// Imports - local\r\nimport classes from \"./style.module.css\";\r\n\r\n// Todo component (eact checkbox, title and delete icon)\r\nconst Todo = ({ todo, rmTodo, toggleCheckbox, updateTodowithId }) => {\r\n\r\n  // Destucturing from todo prop\r\n  const { title, id, isCompleted } = todo;\r\n\r\n  // State to hold the updating/editing flag\r\n  const [editing, setEditing] = useState(false);\r\n\r\n  // State to hold the editing title untill title completes\r\n  const [editChange, setEditChange] = useState(\"\");\r\n\r\n  // Making title editable by triggering state change\r\n  const onEditCkick = () => {\r\n    setEditing(true);\r\n    setEditChange(title);\r\n  };\r\n\r\n  // Trigering the redux state update action\r\n  const onEditChange = event => {\r\n    if ([\"Enter\", \",\", \"Tab\", \"Click\"].includes(event.key)) {\r\n      updateTodowithId(editChange, id);\r\n      setEditing(false);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <div className={classes.todoContainer}>\r\n        <section className={classes.todotextContainer}>\r\n          <div>\r\n            <input\r\n              className={classes.radioCustom}\r\n              type=\"checkbox\"\r\n              checked={isCompleted}\r\n              onChange={() => toggleCheckbox(id)}\r\n            />\r\n          </div>\r\n          <div>\r\n            {editing ? (\r\n              <input\r\n                type=\"text\"\r\n                value={editChange}\r\n                className={classes.editingText}\r\n                id={id}\r\n                onChange={e => setEditChange(e.target.value)}\r\n                onKeyUp={e => onEditChange(e)}\r\n              />\r\n            ) : (\r\n              <p\r\n                className={\r\n                  isCompleted\r\n                    ? [classes.completed, classes.todoText].join(\" \")\r\n                    : classes.todoText\r\n                }\r\n                onDoubleClick={onEditCkick}\r\n              >\r\n                {title}\r\n              </p>\r\n            )}\r\n          </div>\r\n        </section>\r\n        <div className={classes.crossMark} onClick={() => rmTodo(id)}>\r\n          &#x2718;\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","// Imports - libs\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\n//  Imports - local\r\nimport Todos from \"../Todos\";\r\nimport classes from \"./styles.module.css\";\r\n\r\n// Imports - local - Actions\r\nimport {\r\n  addTodo,\r\n  initializeState,\r\n  removeTodo,\r\n  tglCompleted,\r\n  tglAllCompleted,\r\n  rmAllComp,\r\n  updateTodoWithID\r\n} from \"../../store/actions/todoActions\";\r\n\r\n// The Main Component\r\nconst Main = ({\r\n  todos,\r\n  updateTodo,\r\n  initState,\r\n  rmTodo,\r\n  toggleCheckbox,\r\n  toggleallCompleteTodos,\r\n  deleteAllComp,\r\n  updateTodowithId\r\n}) => {\r\n\r\n  // State to hold the todo 'title' until title completes\r\n  const [todoDesc, setTodoDesc] = useState(\"\");\r\n\r\n  // State to show the todos\r\n  const [showState, setShowState] = useState(\"all\");\r\n\r\n  // State to hold the allComplete flag\r\n  const [allComplete, setAllComplete] = useState(false);\r\n\r\n  // Calling the Redux action - initState (to load the todos at component mounting time)\r\n  useEffect(() => {\r\n    initState();\r\n  }, [initState]);\r\n\r\n  // Toggle all todos complete \r\n  const toggleAllCompleted = allComplete => {\r\n    toggleallCompleteTodos(allComplete);\r\n    setAllComplete(!allComplete);\r\n  };\r\n\r\n  // Updating the state in store and local storage \r\n  const updatetheTodo = event => {\r\n    if ([\"Enter\", \"Tab\", \",\"].includes(event.key) && todoDesc.length) {\r\n      event.preventDefault();\r\n      updateTodo(todoDesc);\r\n      setTodoDesc(\"\");\r\n    }\r\n  };\r\n\r\n  // To get the length of active todos\r\n  const getActiveTodoLength = () => todos.filter(t => !t.isCompleted).length;\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.headingTodo}>\r\n        <h1>todos</h1>\r\n      </div>\r\n      <div className={classes.outerContainer}>\r\n        <section className={classes.actionsContainer}>\r\n          <div className={classes.actionsBtnContainer}>\r\n            <button\r\n              onClick={() => setShowState(\"all\")}\r\n              className={showState === \"all\" ? classes.activeBtn : null}\r\n            >\r\n              all\r\n            </button>\r\n            <button\r\n              onClick={() => setShowState(\"active\")}\r\n              className={showState === \"active\" ? classes.activeBtn : null}\r\n            >\r\n              active\r\n            </button>\r\n            <button\r\n              onClick={() => setShowState(\"comp\")}\r\n              className={showState === \"comp\" ? classes.activeBtn : null}\r\n            >\r\n              completed\r\n            </button>\r\n          </div>\r\n          <p>\r\n            {getActiveTodoLength()} item{getActiveTodoLength() > 1 && \"s\"} left\r\n          </p>\r\n        </section>\r\n        <section className={classes.inputBaseContainer}>\r\n          <button\r\n            className={\r\n              allComplete\r\n                ? [classes.markAllComp, classes.darkText].join(\" \")\r\n                : classes.markAllComp\r\n            }\r\n            onClick={() => toggleAllCompleted(allComplete)}\r\n          >\r\n            ✔\r\n          </button>\r\n          <input\r\n            className={classes.inputBase}\r\n            placeholder=\"What needs to be done?\"\r\n            value={todoDesc}\r\n            onChange={e => setTodoDesc(e.target.value)}\r\n            onKeyUp={e => updatetheTodo(e)}\r\n          />\r\n          <button\r\n            className={\r\n              allComplete\r\n                ? [classes.markAllComp, classes.darkText].join(\" \")\r\n                : classes.markAllComp\r\n            }\r\n            onClick={() => deleteAllComp()}\r\n          >\r\n            &#x2718;{\" \"}\r\n          </button>\r\n        </section>\r\n        {todos.map(todo =>\r\n          showState === \"all\" ? (\r\n            <Todos\r\n              todo={todo}\r\n              key={todo.id}\r\n              rmTodo={rmTodo}\r\n              toggleCheckbox={toggleCheckbox}\r\n              updateTodowithId={updateTodowithId}\r\n            />\r\n          ) : showState === \"comp\" && todo.isCompleted ? (\r\n            <Todos\r\n              todo={todo}\r\n              key={todo.id}\r\n              rmTodo={rmTodo}\r\n              toggleCheckbox={toggleCheckbox}\r\n              updateTodowithId={updateTodowithId}\r\n            />\r\n          ) : showState === \"active\" && !todo.isCompleted ? (\r\n            <Todos\r\n              todo={todo}\r\n              key={todo.id}\r\n              rmTodo={rmTodo}\r\n              toggleCheckbox={toggleCheckbox}\r\n              updateTodowithId={updateTodowithId}\r\n            />\r\n          ) : null\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Methed which provide state as props to the Main component\r\nconst mapStateToProps = state => {\r\n  return {\r\n    todos: state\r\n  };\r\n};\r\n\r\n// Methed which dispatches the action to the redux store\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    updateTodo: todoDesc => dispatch(addTodo(todoDesc)),\r\n    initState: () => dispatch(initializeState()),\r\n    rmTodo: id => dispatch(removeTodo(id)),\r\n    toggleCheckbox: id => dispatch(tglCompleted(id)),\r\n    toggleallCompleteTodos: allComplete =>\r\n      dispatch(tglAllCompleted(allComplete)),\r\n    deleteAllComp: () => dispatch(rmAllComp()),\r\n    updateTodowithId: (value, id) => dispatch(updateTodoWithID(value, id))\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\r\n","import {\r\n  ADD_TODO,\r\n  INIT_STATE,\r\n  REMOVE_TODO,\r\n  TOGGLE_COMPLETED,\r\n  TOGGLE_ALL_COMPLETED,\r\n  REMOVE_ALL_COMPLETED,\r\n  UPDATE_TODO_WITH_ID\r\n} from \"./types\";\r\n\r\n// action to add a new todo\r\nexport const addTodo = todo => {\r\n  return {\r\n    type: ADD_TODO,\r\n    todo: todo\r\n  };\r\n};\r\n\r\n// action to intialize the state with local storage at the start \r\nexport const initializeState = () => {\r\n  return {\r\n    type: INIT_STATE\r\n  };\r\n};\r\n\r\n// action to remove the todo\r\nexport const removeTodo = id => {\r\n  return {\r\n    type: REMOVE_TODO,\r\n    id\r\n  };\r\n};\r\n\r\n// action to make todo complete by id\r\nexport const tglCompleted = id => {\r\n  return {\r\n    type: TOGGLE_COMPLETED,\r\n    id\r\n  };\r\n};\r\n\r\n// action for toggling Mark all Complete flag\r\nexport const tglAllCompleted = isAllComplete => {\r\n  return {\r\n    type: TOGGLE_ALL_COMPLETED,\r\n    toggle: isAllComplete\r\n  };\r\n};\r\n\r\n// action to remove all Completed\r\nexport const rmAllComp = () => {\r\n  return {\r\n    type: REMOVE_ALL_COMPLETED\r\n  };\r\n};\r\n\r\n// action to update a todo with ID\r\nexport const updateTodoWithID = (value, id) => {\r\n  return {\r\n    type: UPDATE_TODO_WITH_ID,\r\n    value,\r\n    id\r\n  };\r\n};\r\n","// Types defined to make sure there is no Typo\r\nexport const ADD_TODO = \"ADD_TODO\";\r\nexport const INIT_STATE = \"INIT_STATE\";\r\nexport const REMOVE_TODO = \"REMOVE_TODO\";\r\nexport const TOGGLE_COMPLETED = \"TOGGLE_COMPLETED\";\r\nexport const TOGGLE_ALL_COMPLETED = \"TOGGLE_ALL_COMPLETED\";\r\nexport const REMOVE_ALL_COMPLETED = \"REMOVE_ALL_COMPLETED\";\r\nexport const UPDATE_TODO_WITH_ID = \"UPDATE_TODO_WITH_ID\";\r\n","import React from \"react\";\nimport Main from \"./components/Main\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// Imports - libs\r\nimport uuid from \"uuid\";\r\n\r\n// Imports - local\r\nimport {\r\n  ADD_TODO,\r\n  INIT_STATE,\r\n  REMOVE_TODO,\r\n  TOGGLE_COMPLETED,\r\n  TOGGLE_ALL_COMPLETED,\r\n  REMOVE_ALL_COMPLETED,\r\n  UPDATE_TODO_WITH_ID\r\n} from \"../actions/types\";\r\n\r\n// Util method to update the local storage\r\nconst updateLocalStorage = newState => {\r\n  localStorage.setItem(\"myTodos\", JSON.stringify(newState));\r\n};\r\n\r\n// Initial State\r\nconst initialState = [];\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    // To Add a new TODO\r\n    case ADD_TODO:\r\n      const todoAry = [\r\n        ...state,\r\n        { title: action.todo, isCompleted: false, id: uuid.v4() }\r\n      ];\r\n      // Update local storage\r\n      updateLocalStorage(todoAry);\r\n      return todoAry;\r\n\r\n    // Initial Todo loading from localStorage\r\n    case INIT_STATE:\r\n      let initState = localStorage.getItem(\"myTodos\");\r\n      if (!initState) {\r\n        initState = JSON.stringify([\r\n          { title: \"An Example todo\", isCompleted: false, id: uuid.v4() }\r\n        ]);\r\n      }\r\n      return JSON.parse(initState);\r\n\r\n    // To Remove a Todo by ID\r\n    case REMOVE_TODO:\r\n      const newState = state.filter(todo => todo.id !== action.id);\r\n      // Update local storage\r\n      updateLocalStorage(newState);\r\n      return newState;\r\n\r\n    // Toggle the Completed State of Todo with ID\r\n    case TOGGLE_COMPLETED:\r\n      const upDatedState = state.map(todo => {\r\n        if (todo.id === action.id) {\r\n          return {\r\n            ...todo,\r\n            isCompleted: !todo.isCompleted\r\n          };\r\n        }\r\n        return todo;\r\n      });\r\n      // Update local storage\r\n      updateLocalStorage(upDatedState);\r\n      return upDatedState;\r\n\r\n    // Toggle all completed Flag\r\n    case TOGGLE_ALL_COMPLETED:\r\n      const allCompleted = state.map(todo => {\r\n        return {\r\n          ...todo,\r\n          isCompleted: !action.toggle\r\n        };\r\n      });\r\n      updateLocalStorage(allCompleted);\r\n      return allCompleted;\r\n\r\n    // Removing All Completed\r\n    case REMOVE_ALL_COMPLETED:\r\n      const allActive = state.filter(todo => !todo.isCompleted);\r\n      // Update local storage\r\n      updateLocalStorage(allActive);\r\n      return allActive;\r\n\r\n    // Updating the todo with ID\r\n    case UPDATE_TODO_WITH_ID:\r\n      const updatedWithId = state.map(todo => {\r\n        if (todo.id === action.id) {\r\n          return {\r\n            ...todo,\r\n            title: action.value\r\n          };\r\n        }\r\n        return todo;\r\n      });\r\n      // Update local storage\r\n      updateLocalStorage(updatedWithId);\r\n      return updatedWithId;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default reducer;\r\n","// Import - libs\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\n\n// Import - local\nimport \"./index.css\";\nimport App from \"./App\";\nimport todo from \"./store/reducers/todoReducer\";\n\n// Creating a store and passing todo reducer\nconst store = createStore(todo);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}